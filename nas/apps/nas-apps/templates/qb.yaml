{{ if .Values.qb.create -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: '{{ .Values.qb.name }}'
  name: '{{ .Values.qb.name }}'
  namespace: '{{ .Release.Namespace }}'
spec:
  selector:
    matchLabels:
      app: '{{ .Values.qb.name }}'
  serviceName: '{{ .Values.qb.name }}'
  replicas: 1
  template:
    metadata:
      labels:
        app: '{{ .Values.qb.name }}'
    spec:
      terminationGracePeriodSeconds: {{ .Values.qb.terminationGracePeriodSeconds }}
      initContainers:
      - name: 'test-init'
        image: busybox:stable
        command:
          - "/bin/sh"
        args:
          - "-c"
          - "touch /downloads/test && exit 0 || exit 1"
        volumeMounts:
        - mountPath: /downloads
          name: '{{ .Values.pvc.name }}'
          subPath: '{{ .Values.qb.path.data }}'
      containers:
      - name: '{{ .Values.qb.name }}'
        {{- with .Values.qb.image }}
        image: "{{- if .registry -}}{{ .registry }}/{{ .image }}{{ else }}{{ .image }}{{- end -}}:{{ .tag }}{{- if (.digest) -}} @{{.digest}} {{- end -}}"
        {{- end }}
        imagePullPolicy: {{ .Values.qb.image.pullPolicy }}
        env:
        - name: PUID
          value: '{{ .Values.qb.env.puid }}'
        - name: PGID
          value: '{{ .Values.qb.env.pgid }}'
        - name: TZ
          value: '{{ .Values.qb.env.tz }}'
        - name: WEBUI_PORT
          value: '{{ .Values.qb.containerPort.http }}'
        # livenessProbe:
        #   initialDelaySeconds: {{ .Values.qb.livenessProbe.initialDelaySeconds }}
        #   timeoutSeconds: {{ .Values.qb.livenessProbe.timeoutSeconds }}
        #   periodSeconds: {{ .Values.qb.livenessProbe.periodSeconds }}
        #   exec:
        #     command:
        #       {{- range .Values.qb.livenessProbe.healthCmd }}
        #       - {{. }}
        #       {{- end }}
        ports:
          - name: 'listen-tcp'
            containerPort: {{ .Values.qb.containerPort.listen }}
            protocol: TCP
          - name: 'listen-udp'
            containerPort: {{ .Values.qb.containerPort.listen }}
            protocol: UDP
          - name: 'http'
            containerPort: {{ .Values.qb.containerPort.http }}
            protocol: TCP
        volumeMounts:
        - mountPath: /downloads
          name: '{{ .Values.pvc.name }}'
          subPath: '{{ .Values.qb.path.data }}'
        - mountPath: /config
          name: '{{ .Values.pvc.name }}'
          subPath: '{{ .Values.qb.path.config }}'
      volumes:
      - name: '{{ .Values.pvc.name }}'
        persistentVolumeClaim:
          claimName: '{{ .Values.pvc.name }}'
      {{- if .Values.qb.image.secret }}
      imagePullSecrets:
      - name: '{{ .Values.qb.image.secret }}'
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: '{{ .Values.qb.name }}-http'
  namespace: '{{ .Release.Namespace }}'
spec:
  type: NodePort
  ports:
  - name: 'http'
    port: {{ .Values.qb.containerPort.http }}
    protocol: TCP
    targetPort: {{ .Values.qb.containerPort.http }}
    nodePort: {{ .Values.qb.targetPort.http }}
  selector:
    app: '{{ .Values.qb.name }}'
---
apiVersion: v1
kind: Service
metadata:
  name: '{{ .Values.qb.name }}-listen-tcp'
  namespace: '{{ .Release.Namespace }}'
spec:
  type: NodePort
  ports:
  - name: 'listen-tcp'
    port: {{ .Values.qb.containerPort.listen }}
    protocol: TCP
    targetPort: {{ .Values.qb.containerPort.listen }}
    nodePort: {{ .Values.qb.targetPort.listen }}
  selector:
    app: '{{ .Values.qb.name }}'
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: '{{ .Values.qb.name }}-listen-udp'
#  namespace: '{{ .Release.Namespace }}'
#spec:
#  type: NodePort
#  ports:
#  - name: 'listen-udp'
#    port: {{ .Values.qb.containerPort.listen }}
#    protocol: UDP
#    targetPort: {{ .Values.qb.containerPort.listen }}
#    nodePort: {{ .Values.qb.targetPort.listen }}
#  selector:
#    app: '{{ .Values.qb.name }}'
{{ end -}}
