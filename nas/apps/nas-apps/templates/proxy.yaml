{{ if .Values.proxy.create -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: '{{ .Values.proxy.name }}'
  name: '{{ .Values.proxy.name }}'
  namespace: '{{ .Release.Namespace }}'
spec:
  selector:
    matchLabels:
      app: '{{ .Values.proxy.name }}'
  serviceName: '{{ .Values.proxy.name }}'
  replicas: 1
  template:
    metadata:
      labels:
        app: '{{ .Values.proxy.name }}'
    spec:
      terminationGracePeriodSeconds: {{ .Values.proxy.terminationGracePeriodSeconds }}
      containers:
      - name: '{{ .Values.proxy.nginx.name }}'
        {{- with .Values.proxy.nginx }}
        image: "{{- if .registry -}}{{ .registry }}/{{ .image }}{{ else }}{{ .image }}{{- end -}}:{{ .tag }}{{- if (.digest) -}} @{{.digest}} {{- end -}}"
        {{- end }}
        imagePullPolicy: {{ .Values.proxy.nginx.pullPolicy }}
        ports:
          - name: 'http'
            containerPort: {{ .Values.proxy.nginx.containerPort.http }}
            protocol: TCP
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: '{{ .Values.pvc.name }}'
          subPath: '{{ .Values.proxy.nginx.path.conf }}'
          readOnly: true
        - mountPath: /etc/nginx/ssl
          name: '{{ .Values.pvc.name }}'
          subPath: '{{ .Values.proxy.nginx.path.ssl }}'
          readOnly: true
      {{- range .Values.proxy.frpc.containers }}
        {{- with . }}
      - name: {{ .name }}
        image: 'natfrp/frpc'
        imagePullPolicy: 'IfNotPresent'
        args:
          - {{ .arg }}
        {{- end }}
      {{- end }}
      volumes:
      - name: '{{ .Values.pvc.name }}'
        persistentVolumeClaim:
          claimName: '{{ .Values.pvc.name }}'
      {{- if .Values.proxy.nginx.secret }}
      imagePullSecrets:
      - name: '{{ .Values.proxy.nginx.secret }}'
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: '{{ .Values.proxy.nginx.name }}'
  namespace: '{{ .Release.Namespace }}'
spec:
  type: NodePort
  ports:
  - port: {{ .Values.proxy.nginx.containerPort.http }}
    protocol: TCP
    targetPort: {{ .Values.proxy.nginx.containerPort.http }}
    nodePort: {{ .Values.proxy.nginx.targetPort.http }}
  selector:
    app: '{{ .Values.proxy.name }}'
{{ end -}}
