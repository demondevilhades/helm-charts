{{ if .Values.ag.create -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: '{{ .Values.ag.name }}'
  name: '{{ .Values.ag.name }}'
  namespace: '{{ .Release.Namespace }}'
spec:
  selector:
    matchLabels:
      app: '{{ .Values.ag.name }}'
  serviceName: '{{ .Values.ag.name }}'
  replicas: 1
  template:
    metadata:
      labels:
        app: '{{ .Values.ag.name }}'
    spec:
      terminationGracePeriodSeconds: {{ .Values.ag.terminationGracePeriodSeconds }}
      containers:
      - name: '{{ .Values.ag.name }}'
        {{- with .Values.ag.image }}
        image: "{{- if .registry -}}{{ .registry }}/{{ .image }}{{ else }}{{ .image }}{{- end -}}:{{ .tag }}{{- if (.digest) -}} @{{.digest}} {{- end -}}"
        {{- end }}
        imagePullPolicy: {{ .Values.ag.image.pullPolicy }}
        ports:
          {{- range $key, $value := .Values.ag.containerPort }}
          - name: {{ $key }}
            containerPort: {{ $value }}
            protocol: TCP
          {{- end }}
      {{- if .Values.ag.image.secret }}
      imagePullSecrets:
      - name: '{{ .Values.ag.image.secret }}'
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: '{{ .Values.ag.name }}'
  namespace: '{{ .Release.Namespace }}'
spec:
  type: NodePort
  ports:
  - port: {{ .Values.ag.containerPort.http }}
    protocol: TCP
    targetPort: {{ .Values.ag.containerPort.http }}
    nodePort: {{ .Values.ag.targetPort.http }}
  selector:
    app: '{{ .Values.ag.name }}'
{{ end -}}
